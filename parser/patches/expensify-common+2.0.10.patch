diff --git a/node_modules/expensify-common/dist/ExpensiMark.d.ts b/node_modules/expensify-common/dist/ExpensiMark.d.ts
index a10aa20..9a208f4 100644
--- a/node_modules/expensify-common/dist/ExpensiMark.d.ts
+++ b/node_modules/expensify-common/dist/ExpensiMark.d.ts
@@ -40,14 +40,14 @@ declare type ExtrasObject = {
     reportIDToName?: Record<string, string>;
     accountIDToName?: Record<string, string>;
 };
-export default class ExpensiMark {
-    static Log: Logger;
-    static setLogger(logger: Logger): void;
+declare const ExpensiMark: {
+    Log: Logger;
+    setLogger(logger: Logger): void;

     rules: Rule[];
     htmlToMarkdownRules: Rule[];
     htmlToTextRules: Rule[];
-    constructor();
+    initializer();
     /**
      * Replaces markdown with html elements
      *
@@ -144,4 +144,4 @@ export default class ExpensiMark {
      */
     getRemovedMarkdownLinks(oldComment: string, newComment: string): string[];
 }
-export {};
+export default ExpensiMark;
diff --git a/node_modules/expensify-common/dist/ExpensiMark.js b/node_modules/expensify-common/dist/ExpensiMark.js
index 75a355e..6625e94 100644
--- a/node_modules/expensify-common/dist/ExpensiMark.js
+++ b/node_modules/expensify-common/dist/ExpensiMark.js
@@ -30,19 +30,18 @@ const _ = __importStar(require("underscore"));
 const str_1 = __importDefault(require("./str"));
 const Constants = __importStar(require("./CONST"));
 const UrlPatterns = __importStar(require("./Url"));
-const Logger_1 = __importDefault(require("./Logger"));
 const MARKDOWN_LINK_REGEX = new RegExp(`\\[([^\\][]*(?:\\[[^\\][]*][^\\][]*)*)]\\(${UrlPatterns.MARKDOWN_URL_REGEX}\\)(?![^<]*(<\\/pre>|<\\/code>))`, 'gi');
 const MARKDOWN_IMAGE_REGEX = new RegExp(`\\!(?:\\[([^\\][]*(?:\\[[^\\][]*][^\\][]*)*)])?\\(${UrlPatterns.MARKDOWN_URL_REGEX}\\)(?![^<]*(<\\/pre>|<\\/code>))`, 'gi');
 const SLACK_SPAN_NEW_LINE_TAG = '<span class="c-mrkdwn__br" data-stringify-type="paragraph-break" style="box-sizing: inherit; display: block; height: unset;"></span>';
-class ExpensiMark {
+const ExpensiMark = {
     /**
      * Set the logger to use for logging inside of the ExpensiMark class
      * @param {Object} logger - The logger object to use
      */
-    static setLogger(logger) {
+    setLogger(logger) {
         ExpensiMark.Log = logger;
-    }
-    constructor() {
+    },
+    initializer() {
         /**
          * The list of regex replacements to do on a comment. Check the link regex is first so links are processed
          * before other delimiters
@@ -604,7 +603,7 @@ class ExpensiMark {
          * @type {Number}
          */
         this.currentQuoteDepth = 0;
-    }
+    },
     getHtmlRuleset(filterRules, disabledRules, shouldKeepRawInput) {
         let rules = this.rules;
         const hasRuleName = (rule) => _.contains(filterRules, rule.name);
@@ -619,7 +618,7 @@ class ExpensiMark {
             rules = _.filter(rules, hasDisabledRuleName);
         }
         return rules;
-    }
+    },
     /**
      * Replaces markdown with html elements
      *
@@ -664,7 +663,7 @@ class ExpensiMark {
             return shouldEscapeText ? _.escape(text) : text;
         }
         return replacedText;
-    }
+    },
     /**
      * Checks matched URLs for validity and replace valid links with html elements
      *
@@ -765,7 +764,7 @@ class ExpensiMark {
             replacedText = replacedText.concat(textToCheck.substr(startIndex));
         }
         return replacedText;
-    }
+    },
     /**
      * Checks matched Emails for validity and replace valid links with html elements
      *
@@ -799,7 +798,7 @@ class ExpensiMark {
             replacedText = replacedText.concat(textToCheck.substr(startIndex));
         }
         return replacedText;
-    }
+    },
     /**
      * replace block element with '\n' if :
      * 1. We have text within the element.
@@ -837,7 +836,7 @@ class ExpensiMark {
         };
         splitText.forEach(processText);
         return joinedText;
-    }
+    },
     /**
      * Replaces HTML with markdown
      *
@@ -865,7 +864,7 @@ class ExpensiMark {
         };
         this.htmlToMarkdownRules.forEach(processRule);
         return str_1.default.htmlDecode(this.replaceBlockElementWithNewLine(generatedMarkdown));
-    }
+    },
     /**
      * Convert HTML to text
      *
@@ -886,7 +885,7 @@ class ExpensiMark {
         // We use 'htmlDecode' instead of 'unescape' to replace entities like '&#32;'
         replacedText = str_1.default.htmlDecode(replacedText);
         return replacedText;
-    }
+    },
     /**
      * Modify text for Quotes replacing chevrons with html elements
      *
@@ -943,7 +942,7 @@ class ExpensiMark {
             replacedText = textToCheck;
         }
         return replacedText;
-    }
+    },
     /**
      * Format the content of blockquote if the text matches the regex or else just return the original text
      *
@@ -969,7 +968,7 @@ class ExpensiMark {
             return replacement(textToFormat);
         }
         return textToCheck;
-    }
+    },
     /**
      * Check if the input text includes only the open or the close tag of an element.
      *
@@ -1003,7 +1002,7 @@ class ExpensiMark {
         }
         // If there are any tags left in the stack, they're unclosed
         return tagStack.length !== 0;
-    }
+    },
     /**
      * @param {String} comment
      * @returns {Array} or undefined if exception occurs when executing regex matching
@@ -1024,7 +1023,7 @@ class ExpensiMark {
             console.warn('Error parsing url in ExpensiMark.extractLinksInMarkdownComment', { error: e });
             return undefined;
         }
-    }
+    },
     /**
      * Compares two markdown comments and returns a list of the links removed in a new comment.
      *
@@ -1036,7 +1035,7 @@ class ExpensiMark {
         const linksInOld = this.extractLinksInMarkdownComment(oldComment);
         const linksInNew = this.extractLinksInMarkdownComment(newComment);
         return linksInOld === undefined || linksInNew === undefined ? [] : _.difference(linksInOld, linksInNew);
-    }
+    },
     /**
      * Escapes the content of an HTML attribute value
      * @param {String} content - string content that possible contains HTML
@@ -1053,10 +1052,5 @@ class ExpensiMark {
         return _.escape(originalContent);
     }
 }
-ExpensiMark.Log = new Logger_1.default({
-    serverLoggingCallback: _.noop,
-    // eslint-disable-next-line no-console
-    clientLoggingCallback: (message) => console.warn(message),
-    isDebug: true,
-});
+ExpensiMark.initializer();
 exports.default = ExpensiMark;
