diff --git a/node_modules/expensify-common/lib/ExpensiMark.js b/node_modules/expensify-common/lib/ExpensiMark.js
index a8fa687..ad48ab5 100644
--- a/node_modules/expensify-common/lib/ExpensiMark.js
+++ b/node_modules/expensify-common/lib/ExpensiMark.js
@@ -7,8 +7,8 @@ const MARKDOWN_LINK_REGEX = new RegExp(`\\[([^\\][]*(?:\\[[^\\][]*][^\\][]*)*)]\
 
 const SLACK_SPAN_NEW_LINE_TAG = '<span class="c-mrkdwn__br" data-stringify-type="paragraph-break" style="box-sizing: inherit; display: block; height: unset;"></span>';
 
-export default class ExpensiMark {
-    constructor() {
+export const ExpensiMark = {
+    initializer() {
         /**
          * The list of regex replacements to do on a comment. Check the link regex is first so links are processed
          * before other delimiters
@@ -34,7 +34,10 @@ export default class ExpensiMark {
                 // &nbsp; will create styling issues so use &#32;
                 replacement: (match, __, textWithinFences) => {
                     const group = textWithinFences.replace(/(?:(?![\n\r])\s)/g, '&#32;');
-                    return `<pre>${group}</pre>`;
+                    // get original text within triple backticks, whitespaces included
+                    const dataRaw = match.replace(/(?:&#x60;&#x60;&#x60;)([\s\S]*?)(?:&#x60;&#x60;&#x60;)/g, '$1');
+
+                    return `<pre data-code-raw="${dataRaw}">${group}</pre>`;
                 },
             },
 
@@ -65,14 +68,15 @@ export default class ExpensiMark {
                     );
                     return this.modifyTextForEmailLinks(regex, textToProcess, replacement);
                 },
-                replacement: (match, g1, g2) => {
+                replacement: (match, g1, g2, g3) => {
                     if (g1.match(CONST.REG_EXP.EMOJIS) || !g1.trim()) {
                         return match;
                     }
                     const label = g1.trim();
-                    const href = `mailto:${g2}`;
-                    const formattedLabel = label === href ? g2 : label;
-                    return `<a href="${href}">${formattedLabel}</a>`;
+                    const dataRawHref = g2 ? g2 + g3 : g3;
+                    const href = `mailto:${g3}`;
+                    const formattedLabel = label === href ? g3 : label;
+                    return `<a href="${href}" data-raw-href="${dataRawHref}" data-link-variant="labeled" data-raw-label="${g1}">${label}</a>`;
                 },
             },
 
@@ -98,7 +102,7 @@ export default class ExpensiMark {
                     if (g1.match(CONST.REG_EXP.EMOJIS) || !g1.trim()) {
                         return match;
                     }
-                    return `<a href="${Str.sanitizeURL(g2)}" target="_blank" rel="noreferrer noopener">${g1.trim()}</a>`;
+                    return `<a href="${Str.sanitizeURL(g2)}" data-raw-href="${g2}" data-link-variant="labeled" target="_blank" rel="noreferrer noopener">${g1.trim()}</a>`;
                 },
             },
 
@@ -110,7 +114,7 @@ export default class ExpensiMark {
              */
             {
                 name: 'hereMentions',
-                regex: /([a-zA-Z0-9.!$%&+/=?^`{|}_-]?)(@here)([.!$%&+/=?^`{|}_-]?)(?=\b)(?!([\w'#%+-]*@(?:[a-z\d-]+\.)+[a-z]{2,}(?:\s|$|@here))|((?:(?!<a).)+)?<\/a>|[^<]*(<\/pre>|<\/code>))/gm,
+                regex: /([a-zA-Z0-9.!$%&+/=?^`{|}_-]?)(@here)([.!$%&+/=?^`{|}_-]?)(?=\b)(?!(@[a-zA-Z0-9-]+?(\.[a-zA-Z]+)+)|((?:(?!<a).)+)?<\/a>|[^<]*(<\/pre>|<\/code>))/gm,
                 replacement: (match, g1, g2, g3) => {
                     if (!Str.isValidMention(match)) {
                         return match;
@@ -160,7 +164,7 @@ export default class ExpensiMark {
 
                 replacement: (match, g1, g2) => {
                     const href = Str.sanitizeURL(g2);
-                    return `${g1}<a href="${href}" target="_blank" rel="noreferrer noopener">${g2}</a>${g1}`;
+                    return `${g1}<a href="${href}" data-raw-href="${g2}" data-link-variant="auto" target="_blank" rel="noreferrer noopener">${g2}</a>${g1}`;
                 },
             },
             {
@@ -199,7 +203,7 @@ export default class ExpensiMark {
                     `([^\\w'#%+-]|^)${CONST.REG_EXP.MARKDOWN_EMAIL}(?!((?:(?!<a).)+)?<\\/a>|[^<>]*<\\/(?!em|h1))`,
                     'gim',
                 ),
-                replacement: '$1<a href="mailto:$2">$2</a>',
+                replacement: '$1<a href="mailto:$2" data-raw-href="$2" data-link-variant="auto">$2</a>',
             },
 
             {
@@ -423,7 +427,7 @@ export default class ExpensiMark {
          * @type {Object[]}
          */
         this.shouldKeepWhitespaceRules = this.rules.filter(rule => !this.whitespaceRulesToDisable.includes(rule.name)).map(rule => rule.name);
-    }
+    },
 
     /**
      * Replaces markdown with html elements
@@ -469,7 +473,7 @@ export default class ExpensiMark {
         }
 
         return replacedText;
-    }
+    },
 
     /**
      * Checks matched URLs for validity and replace valid links with html elements
@@ -576,7 +580,7 @@ export default class ExpensiMark {
         }
 
         return replacedText;
-    }
+    },
 
     /**
      * Checks matched Emails for validity and replace valid links with html elements
@@ -601,7 +605,7 @@ export default class ExpensiMark {
                 filterRules: ['bold', 'strikethrough', 'italic'],
                 shouldEscapeText: false,
             });
-            replacedText = replacedText.concat(replacement(match[0], linkText, match[3]));
+            replacedText = replacedText.concat(replacement(match[0], linkText, match[2], match[3]));
             startIndex = match.index + (match[0].length);
 
             // Now we move to the next match that the js regex found in the text
@@ -611,7 +615,7 @@ export default class ExpensiMark {
             replacedText = replacedText.concat(textToCheck.substr(startIndex));
         }
         return replacedText;
-    }
+    },
 
     /**
      * replace block element with '\n' if :
@@ -651,7 +655,7 @@ export default class ExpensiMark {
         });
 
         return joinedText;
-    }
+    },
 
     /**
      * Replaces HTML with markdown
@@ -678,7 +682,7 @@ export default class ExpensiMark {
             generatedMarkdown = generatedMarkdown.replace(rule.regex, rule.replacement);
         });
         return Str.htmlDecode(this.replaceBlockElementWithNewLine(generatedMarkdown));
-    }
+    },
 
     /**
      * Convert HTML to text
@@ -697,7 +701,7 @@ export default class ExpensiMark {
         // We use 'htmlDecode' instead of 'unescape' to replace entities like '&#32;'
         replacedText = Str.htmlDecode(replacedText);
         return replacedText;
-    }
+    },
 
     /**
      * Modify text for Quotes replacing chevrons with html elements
@@ -760,7 +764,7 @@ export default class ExpensiMark {
             replacedText = textToCheck;
         }
         return replacedText;
-    }
+    },
 
     /**
      * Format the content of blockquote if the text matches the regex or else just return the original text
@@ -781,7 +785,7 @@ export default class ExpensiMark {
             return replacement(textToFormat);
         }
         return textToCheck;
-    }
+    },
 
     /**
      * Check if the input text includes only the open or the close tag of an element.
@@ -820,7 +824,7 @@ export default class ExpensiMark {
 
         // If there are any tags left in the stack, they're unclosed
         return tagStack.length !== 0;
-    }
+    },
 
     /**
      * @param {String} comment
@@ -842,7 +846,7 @@ export default class ExpensiMark {
             console.warn('Error parsing url in ExpensiMark.extractLinksInMarkdownComment', {error: e});
             return undefined;
         }
-    }
+    },
 
     /**
      * Compares two markdown comments and returns a list of the links removed in a new comment.
@@ -857,3 +861,5 @@ export default class ExpensiMark {
         return linksInOld === undefined || linksInNew === undefined ? [] : _.difference(linksInOld, linksInNew);
     }
 }
+
+ExpensiMark.initializer();
