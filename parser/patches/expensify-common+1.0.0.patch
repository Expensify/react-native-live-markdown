diff --git a/node_modules/expensify-common/lib/CONST.jsx b/node_modules/expensify-common/lib/CONST.jsx
index a8efadf..8b7ca6d 100644
--- a/node_modules/expensify-common/lib/CONST.jsx
+++ b/node_modules/expensify-common/lib/CONST.jsx
@@ -356,14 +356,14 @@ export const CONST = {
          *
          * @type RegExp
          */
-        EMOJIS: /[\p{Extended_Pictographic}\u200d\u{1f1e6}-\u{1f1ff}\u{1f3fb}-\u{1f3ff}\u{e0020}-\u{e007f}\u20E3\uFE0F]|[#*0-9]\uFE0F?\u20E3/gu,
+        EMOJIS: /[\u200d\u{1f1e6}-\u{1f1ff}\u{1f3fb}-\u{1f3ff}\u{e0020}-\u{e007f}\u20E3\uFE0F]|[#*0-9]\uFE0F?\u20E3/gu,
 
         /**
          * Regex matching an text containing an Emoji that can be a single emoji or made up by some different emojis
          *
          * @type RegExp
          */
-        EMOJI_RULE: /[\p{Extended_Pictographic}](\u200D[\p{Extended_Pictographic}]|[\u{1F3FB}-\u{1F3FF}]|[\u{E0020}-\u{E007F}]|\uFE0F|\u20E3)*|[\u{1F1E6}-\u{1F1FF}]{2}|[#*0-9]\uFE0F?\u20E3/gu,
+        EMOJI_RULE: /^(?!x)x/gu,
     },
 
     REPORT: {
diff --git a/node_modules/expensify-common/lib/ExpensiMark.js b/node_modules/expensify-common/lib/ExpensiMark.js
index f835d84..c65d2c6 100644
--- a/node_modules/expensify-common/lib/ExpensiMark.js
+++ b/node_modules/expensify-common/lib/ExpensiMark.js
@@ -7,8 +7,8 @@ const MARKDOWN_LINK_REGEX = new RegExp(`\\[([^\\][]*(?:\\[[^\\][]*][^\\][]*)*)]\
 
 const SLACK_SPAN_NEW_LINE_TAG = '<span class="c-mrkdwn__br" data-stringify-type="paragraph-break" style="box-sizing: inherit; display: block; height: unset;"></span>';
 
-export default class ExpensiMark {
-    constructor() {
+export const ExpensiMark = {
+    initializer() {
         /**
          * The list of regex replacements to do on a comment. Check the link regex is first so links are processed
          * before other delimiters
@@ -489,7 +489,7 @@ export default class ExpensiMark {
          * @type {Number}
          */
         this.currentQuoteDepth = 0;
-    }
+    },
 
     /**
      * Replaces markdown with html elements
@@ -535,7 +535,7 @@ export default class ExpensiMark {
         }
 
         return replacedText;
-    }
+    },
 
     /**
      * Checks matched URLs for validity and replace valid links with html elements
@@ -642,7 +642,7 @@ export default class ExpensiMark {
         }
 
         return replacedText;
-    }
+    },
 
     /**
      * Checks matched Emails for validity and replace valid links with html elements
@@ -681,7 +681,7 @@ export default class ExpensiMark {
             replacedText = replacedText.concat(textToCheck.substr(startIndex));
         }
         return replacedText;
-    }
+    },
 
     /**
      * replace block element with '\n' if :
@@ -721,7 +721,7 @@ export default class ExpensiMark {
         });
 
         return joinedText;
-    }
+    },
 
     /**
      * Replaces HTML with markdown
@@ -748,7 +748,7 @@ export default class ExpensiMark {
             generatedMarkdown = generatedMarkdown.replace(rule.regex, rule.replacement);
         });
         return Str.htmlDecode(this.replaceBlockElementWithNewLine(generatedMarkdown));
-    }
+    },
 
     /**
      * Convert HTML to text
@@ -767,7 +767,7 @@ export default class ExpensiMark {
         // We use 'htmlDecode' instead of 'unescape' to replace entities like '&#32;'
         replacedText = Str.htmlDecode(replacedText);
         return replacedText;
-    }
+    },
 
     /**
      * Modify text for Quotes replacing chevrons with html elements
@@ -830,7 +830,7 @@ export default class ExpensiMark {
             replacedText = textToCheck;
         }
         return replacedText;
-    }
+    },
 
     /**
      * Format the content of blockquote if the text matches the regex or else just return the original text
@@ -851,7 +851,7 @@ export default class ExpensiMark {
             return replacement(textToFormat);
         }
         return textToCheck;
-    }
+    },
 
     /**
      * Check if the input text includes only the open or the close tag of an element.
@@ -890,7 +890,7 @@ export default class ExpensiMark {
 
         // If there are any tags left in the stack, they're unclosed
         return tagStack.length !== 0;
-    }
+    },
 
     /**
      * @param {String} comment
@@ -912,7 +912,7 @@ export default class ExpensiMark {
             console.warn('Error parsing url in ExpensiMark.extractLinksInMarkdownComment', {error: e});
             return undefined;
         }
-    }
+    },
 
     /**
      * Compares two markdown comments and returns a list of the links removed in a new comment.
@@ -927,3 +927,5 @@ export default class ExpensiMark {
         return linksInOld === undefined || linksInNew === undefined ? [] : _.difference(linksInOld, linksInNew);
     }
 }
+
+ExpensiMark.initializer();
