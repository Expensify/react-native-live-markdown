diff --git a/node_modules/expensify-common/lib/CONST.jsx b/node_modules/expensify-common/lib/CONST.jsx
index 66de942..8d0eac3 100644
--- a/node_modules/expensify-common/lib/CONST.jsx
+++ b/node_modules/expensify-common/lib/CONST.jsx
@@ -344,7 +344,7 @@ export const CONST = {
          *
          * @type RegExp
          */
-        EMOJIS: /[\p{Extended_Pictographic}\u200d\u{1f1e6}-\u{1f1ff}\u{1f3fb}-\u{1f3ff}\u{e0020}-\u{e007f}\u20E3\uFE0F]|[#*0-9]\uFE0F?\u20E3/gu,
+        EMOJIS: /[\u200d\u{1f1e6}-\u{1f1ff}\u{1f3fb}-\u{1f3ff}\u{e0020}-\u{e007f}\u20E3\uFE0F]|[#*0-9]\uFE0F?\u20E3/gu,
     },
 
     REPORT: {
diff --git a/node_modules/expensify-common/lib/ExpensiMark.js b/node_modules/expensify-common/lib/ExpensiMark.js
index 2d77cc3..a580a98 100644
--- a/node_modules/expensify-common/lib/ExpensiMark.js
+++ b/node_modules/expensify-common/lib/ExpensiMark.js
@@ -7,8 +7,8 @@ const MARKDOWN_LINK_REGEX = new RegExp(`\\[([^\\][]*(?:\\[[^\\][]*][^\\][]*)*)]\
 
 const SLACK_SPAN_NEW_LINE_TAG = '<span class="c-mrkdwn__br" data-stringify-type="paragraph-break" style="box-sizing: inherit; display: block; height: unset;"></span>';
 
-export default class ExpensiMark {
-    constructor() {
+export const ExpensiMark = {
+    initializer() {
         /**
          * The list of regex replacements to do on a comment. Check the link regex is first so links are processed
          * before other delimiters
@@ -56,19 +56,25 @@ export default class ExpensiMark {
              * We need to convert before the auto email link rule and the manual link rule since it will not try to create a link
              * from an existing anchor tag.
              */
-            {
+             {
                 name: 'email',
                 process: (textToProcess, replacement) => {
                     const regex = new RegExp(
-                        `(?!\\[\\s*\\])\\[([^[\\]]*)]\\(${CONST.REG_EXP.MARKDOWN_EMAIL}\\)`, 'gim'
+                        `(?!\\[\\s*\\])\\[([^[\\]]*)]\\((mailto:)?${CONST.REG_EXP.MARKDOWN_EMAIL}\\)`, 'gim'
                     );
                     return this.modifyTextForEmailLinks(regex, textToProcess, replacement);
                 },
-                replacement: (match, g1, g2) => {
+                replacement: (match, g1, g2, g3) => {
                     if (g1.match(CONST.REG_EXP.EMOJIS) || !g1.trim()) {
                         return match;
                     }
-                    return `<a href="mailto:${g2}">${g1.trim()}</a>`;
+                    let label = g1.trim();
+                    const dataRawHref = g2 ? g2 + g3 : g3;
+                    const href = `mailto:${g3}`;
+                    if (label === href) {
+                        label = g3;
+                    }
+                    return `<a href="${href}" data-raw-href="${dataRawHref}" data-link-variant="labeled" data-raw-label="${g1}">${label}</a>`;
                 },
             },
 
@@ -85,7 +91,7 @@ export default class ExpensiMark {
                     if (g1.match(CONST.REG_EXP.EMOJIS) || !g1.trim()) {
                         return match;
                     }
-                    return `<a href="${Str.sanitizeURL(g2)}" target="_blank" rel="noreferrer noopener">${g1.trim()}</a>`;
+                    return `<a href="${Str.sanitizeURL(g2)}" data-raw-href="${g2}" data-link-variant="labeled" target="_blank" rel="noreferrer noopener">${g1.trim()}</a>`;
                 },
             },
 
@@ -95,9 +101,9 @@ export default class ExpensiMark {
              *
              * Also, apply the mention rule after email/link to prevent mention appears in an email/link.
              */
-            {
+             {
                 name: 'hereMentions',
-                regex: /([a-zA-Z0-9.!$%&+/=?^`{|}_-]?)(@here)([a-zA-Z0-9.!$%&+/=?^`{|}_-]?)(?=\b)(?!(@[a-zA-Z0-9-]+?(\.[a-zA-Z]+)+)|((?:(?!<a).)+)?<\/a>|[^<]*(<\/pre>|<\/code>))/gm,
+                regex: /([a-zA-Z0-9.!$%&+/=?^`{|}_-]?)(@here)([.!$%&+/=?^`{|}_-]?)(?=\b)(?!(@[a-zA-Z0-9-]+?(\.[a-zA-Z]+)+)|((?:(?!<a).)+)?<\/a>|[^<]*(<\/pre>|<\/code>))/gm,
                 replacement: (match, g1, g2, g3) => {
                     if (!Str.isValidMention(match)) {
                         return match;
@@ -141,7 +147,7 @@ export default class ExpensiMark {
 
                 replacement: (match, g1, g2) => {
                     const href = Str.sanitizeURL(g2);
-                    return `${g1}<a href="${href}" target="_blank" rel="noreferrer noopener">${g2}</a>${g1}`;
+                    return `${g1}<a href="${href}" data-raw-href="${g2}" data-link-variant="auto" target="_blank" rel="noreferrer noopener">${g2}</a>${g1}`;
                 },
             },
             {
@@ -180,12 +186,15 @@ export default class ExpensiMark {
                     `(?![^<]*>|[^<>]*<\\/(?!em))([^\\w'#%+-]|^|<em>)${CONST.REG_EXP.MARKDOWN_EMAIL}(?!((?:(?!<a).)+)?<\\/a>|[^<]*(<\\/pre>|<\\/code>))`,
                     'gim',
                 ),
-                replacement: '$1<a href="mailto:$2">$2</a>',
+                replacement: '$1<a href="mailto:$2" data-raw-href="$2" data-link-variant="auto">$2</a>',
             },
 
             {
                 name: 'heading1',
-                regex: /^# +(?! )((?:(?!<pre>|\n|\r\n).)+)/gm,
+                process: (textToProcess, replacement, shouldKeepWhitespace = false) => {
+                    const regexp = shouldKeepWhitespace ? /^# ( *(?! )(?:(?!<pre>|\n|\r\n).)+)/gm : /^# +(?! )((?:(?!<pre>|\n|\r\n).)+)/gm;
+                    return textToProcess.replace(regexp, replacement);
+                },
                 replacement: '<h1>$1</h1>',
             },
             {
@@ -194,15 +203,25 @@ export default class ExpensiMark {
                 // We also want to capture a blank line before or after the quote so that we do not add extra spaces.
                 // block quotes naturally appear on their own line. Blockquotes should not appear in code fences or
                 // inline code blocks. A single prepending space should be stripped if it exists
-                process: (textToProcess, replacement) => {
+                process: (textToProcess, replacement, shouldKeepWhitespace = false) => {
                     const regex = new RegExp(
-                        /\n?^&gt; *(?! )(?![^<]*(?:<\/pre>|<\/code>))([^\v\n\r]+)\n?/gm,
+                        /^&gt; *(?! )(?![^<]*(?:<\/pre>|<\/code>))([^\v\n\r]+)/gm,
                     );
+                    if (shouldKeepWhitespace) {
+                        return textToProcess.replace(regex, g1 => replacement(g1, shouldKeepWhitespace));
+                    }
                     return this.modifyTextForQuote(regex, textToProcess, replacement);
                 },
-                replacement: (g1) => {
-                    const replacedText = this.replace(g1, {filterRules: ['heading1'], shouldEscapeText: false});
-                    return `<blockquote>${replacedText}</blockquote>`;
+                replacement: (g1, shouldKeepWhitespace = false) => {
+                    // We want to enable 2 options of nested heading inside the blockquote: "># heading" and "> # heading".
+                    // To do this we need to parse body of the quote without first space
+                    let isStartingWithSpace = false;
+                    const textToReplace = g1.replace(/^&gt;( )?/gm, (match, g2) => {
+                        isStartingWithSpace = !!g2;
+                        return '';
+                    });
+                    const replacedText = this.replace(textToReplace, {filterRules: ['heading1'], shouldEscapeText: false, shouldKeepWhitespace});
+                    return `<blockquote>${isStartingWithSpace ? ' ' : ''}${replacedText}</blockquote>`;
                 },
             },
             {
@@ -388,7 +407,19 @@ export default class ExpensiMark {
                 replacement: '',
             },
         ];
-    }
+
+        /**
+         * The list of rules that we have to exclude in shouldKeepWhitespaceRules list.
+         * @type {Object[]}
+         */
+        this.whitespaceRulesToDisable = ['newline', 'replacepre', 'replacebr', 'replaceh1br'];
+
+        /**
+         * The list of rules that have to be applied when shouldKeepWhitespace flag is true.
+         * @type {Object[]}
+         */
+        this.shouldKeepWhitespaceRules = this.rules.filter(rule => !this.whitespaceRulesToDisable.includes(rule.name)).map(rule => rule.name);
+    },
 
     /**
      * Replaces markdown with html elements
@@ -401,11 +432,11 @@ export default class ExpensiMark {
      *
      * @returns {String}
      */
-    replace(text, {filterRules = [], shouldEscapeText = true} = {}) {
+     replace(text, {filterRules = [], shouldEscapeText = true, shouldKeepWhitespace = false} = {}) {
         // This ensures that any html the user puts into the comment field shows as raw html
         let replacedText = shouldEscapeText ? _.escape(text) : text;
-
-        const rules = _.isEmpty(filterRules) ? this.rules : _.filter(this.rules, rule => _.contains(filterRules, rule.name));
+        const excludeRules = shouldKeepWhitespace ? _.union(this.shouldKeepWhitespaceRules, filterRules) : filterRules;
+        const rules = _.isEmpty(excludeRules) ? this.rules : _.filter(this.rules, rule => _.contains(excludeRules, rule.name));
 
         try {
             rules.forEach((rule) => {
@@ -415,7 +446,7 @@ export default class ExpensiMark {
                 }
 
                 if (rule.process) {
-                    replacedText = rule.process(replacedText, rule.replacement);
+                    replacedText = rule.process(replacedText, rule.replacement, shouldKeepWhitespace);
                 } else {
                     replacedText = replacedText.replace(rule.regex, rule.replacement);
                 }
@@ -434,7 +465,7 @@ export default class ExpensiMark {
         }
 
         return replacedText;
-    }
+    },
 
     /**
      * Checks matched URLs for validity and replace valid links with html elements
@@ -519,7 +550,7 @@ export default class ExpensiMark {
         }
 
         return replacedText;
-    }
+    },
 
     /**
      * Checks matched Emails for validity and replace valid links with html elements
@@ -544,7 +575,7 @@ export default class ExpensiMark {
                 filterRules: ['bold', 'strikethrough', 'italic'],
                 shouldEscapeText: false,
             });
-            replacedText = replacedText.concat(replacement(match[0], linkText, match[2]));
+            replacedText = replacedText.concat(replacement(match[0], linkText, match[2], match[3]));
             startIndex = match.index + (match[0].length);
 
             // Now we move to the next match that the js regex found in the text
@@ -554,7 +585,7 @@ export default class ExpensiMark {
             replacedText = replacedText.concat(textToCheck.substr(startIndex));
         }
         return replacedText;
-    }
+    },
 
     /**
      * replace block element with '\n' if :
@@ -594,7 +625,7 @@ export default class ExpensiMark {
         });
 
         return joinedText;
-    }
+    },
 
     /**
      * Replaces HTML with markdown
@@ -621,7 +652,7 @@ export default class ExpensiMark {
             generatedMarkdown = generatedMarkdown.replace(rule.regex, rule.replacement);
         });
         return Str.htmlDecode(this.replaceBlockElementWithNewLine(generatedMarkdown));
-    }
+    },
 
     /**
      * Convert HTML to text
@@ -640,7 +671,7 @@ export default class ExpensiMark {
         // We use 'htmlDecode' instead of 'unescape' to replace entities like '&#32;'
         replacedText = Str.htmlDecode(replacedText);
         return replacedText;
-    }
+    },
 
     /**
      * Modify text for Quotes replacing chevrons with html elements
@@ -703,7 +734,7 @@ export default class ExpensiMark {
             replacedText = textToCheck;
         }
         return replacedText;
-    }
+    },
 
     /**
      * Format the content of blockquote if the text matches the regex or else just return the original text
@@ -724,7 +755,7 @@ export default class ExpensiMark {
             return replacement(textToFormat);
         }
         return textToCheck;
-    }
+    },
 
     /**
      * Check if the input text includes only the open or the close tag of an element.
@@ -763,7 +794,7 @@ export default class ExpensiMark {
 
         // If there are any tags left in the stack, they're unclosed
         return tagStack.length !== 0;
-    }
+    },
 
     /**
      * @param {String} comment
@@ -785,7 +816,7 @@ export default class ExpensiMark {
             console.warn('Error parsing url in ExpensiMark.extractLinksInMarkdownComment', {error: e});
             return undefined;
         }
-    }
+    },
 
     /**
      * Compares two markdown comments and returns a list of the links removed in a new comment.
@@ -800,3 +831,5 @@ export default class ExpensiMark {
         return linksInOld === undefined || linksInNew === undefined ? [] : _.difference(linksInOld, linksInNew);
     }
 }
+
+ExpensiMark.initializer();
